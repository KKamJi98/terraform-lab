Acquiring state lock. This may take a few moments...
[0m[1mdata.terraform_remote_state.basic: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mdata.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2830595799][0m
[0m[1mmodule.eks.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=376129852049][0m
[0m[1mdata.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.external_secrets: Reading...[0m[0m
[0m[1mdata.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:iam::376129852049:user/KKamJi2024][0m
[0m[1mmodule.eks.data.aws_caller_identity.current[0]: Read complete after 0s [id=376129852049][0m
[0m[1mdata.aws_iam_policy_document.external_secrets: Read complete after 0s [id=94977499][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current[0]: Read complete after 0s [id=arn:aws:iam::376129852049:user/KKamJi2024][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=376129852049][0m
[0m[1mdata.terraform_remote_state.basic: Read complete after 5s[0m
[0m[1mdata.aws_vpc.this: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].data.aws_ssm_parameter.ami[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].module.user_data.data.cloudinit_config.al2023_eks_managed_node_group[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].module.user_data.data.cloudinit_config.al2023_eks_managed_node_group[0]: Read complete after 0s [id=140799688][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].data.aws_ssm_parameter.ami[0]: Read complete after 0s [id=/aws/service/eks/optimized-ami/1.33/amazon-linux-2023/arm64/standard/recommended/release_version][0m
[0m[1mdata.aws_vpc.this: Read complete after 0s [id=vpc-06531225369d17ce4][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_eks_pod_identity_association.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_pod_identity_association" "aws_load_balancer_controller" {
      [32m+[0m[0m association_arn      = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m cluster_name         = "kkamji-simple"
      [32m+[0m[0m disable_session_tags = false
      [32m+[0m[0m external_id          = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m namespace            = "kube-system"
      [32m+[0m[0m region               = "ap-northeast-2"
      [32m+[0m[0m role_arn             = (known after apply)
      [32m+[0m[0m service_account      = "aws-load-balancer-controller"
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # aws_eks_pod_identity_association.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_pod_identity_association" "external_secrets" {
      [32m+[0m[0m association_arn      = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m cluster_name         = "kkamji-simple"
      [32m+[0m[0m disable_session_tags = false
      [32m+[0m[0m external_id          = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m namespace            = "external-secrets"
      [32m+[0m[0m region               = "ap-northeast-2"
      [32m+[0m[0m role_arn             = (known after apply)
      [32m+[0m[0m service_account      = "external-secrets"
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # aws_iam_policy.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "aws_load_balancer_controller" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Permissions for AWS Load Balancer Controller"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "kkamji-aws-lbc-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "iam:CreateServiceLinkedRole",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "iam:AWSServiceName" = "elasticloadbalancing.amazonaws.com"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeAccountAttributes",
                          [32m+[0m[0m "ec2:DescribeAddresses",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:DescribeInternetGateways",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:DescribeVpcPeeringConnections",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:GetCoipPoolUsage",
                          [32m+[0m[0m "ec2:DescribeCoipPools",
                          [32m+[0m[0m "ec2:GetSecurityGroupsForVpc",
                          [32m+[0m[0m "ec2:DescribeIpamPools",
                          [32m+[0m[0m "ec2:DescribeRouteTables",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancers",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListeners",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:DescribeSSLPolicies",
                          [32m+[0m[0m "elasticloadbalancing:DescribeRules",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroups",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetHealth",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTags",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTrustStores",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListenerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeCapacityReservation",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cognito-idp:DescribeUserPoolClient",
                          [32m+[0m[0m "acm:ListCertificates",
                          [32m+[0m[0m "acm:DescribeCertificate",
                          [32m+[0m[0m "iam:ListServerCertificates",
                          [32m+[0m[0m "iam:GetServerCertificate",
                          [32m+[0m[0m "waf-regional:GetWebACL",
                          [32m+[0m[0m "waf-regional:GetWebACLForResource",
                          [32m+[0m[0m "waf-regional:AssociateWebACL",
                          [32m+[0m[0m "waf-regional:DisassociateWebACL",
                          [32m+[0m[0m "wafv2:GetWebACL",
                          [32m+[0m[0m "wafv2:GetWebACLForResource",
                          [32m+[0m[0m "wafv2:AssociateWebACL",
                          [32m+[0m[0m "wafv2:DisassociateWebACL",
                          [32m+[0m[0m "shield:GetSubscriptionState",
                          [32m+[0m[0m "shield:DescribeProtection",
                          [32m+[0m[0m "shield:CreateProtection",
                          [32m+[0m[0m "shield:DeleteProtection",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "ec2:CreateAction" = "CreateSecurityGroup"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                          [32m+[0m[0m "ec2:DeleteTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:DeleteSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "elasticloadbalancing:DeleteListener",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:DeleteRule",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:SetIpAddressType",
                          [32m+[0m[0m "elasticloadbalancing:SetSecurityGroups",
                          [32m+[0m[0m "elasticloadbalancing:SetSubnets",
                          [32m+[0m[0m "elasticloadbalancing:DeleteLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DeleteTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:ModifyListenerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:ModifyCapacityReservation",
                          [32m+[0m[0m "elasticloadbalancing:ModifyIpPools",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "elasticloadbalancing:CreateAction" = [
                                  [32m+[0m[0m "CreateTargetGroup",
                                  [32m+[0m[0m "CreateLoadBalancer",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:RegisterTargets",
                          [32m+[0m[0m "elasticloadbalancing:DeregisterTargets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:SetWebAcl",
                          [32m+[0m[0m "elasticloadbalancing:ModifyListener",
                          [32m+[0m[0m "elasticloadbalancing:AddListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:RemoveListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:ModifyRule",
                          [32m+[0m[0m "elasticloadbalancing:SetRulePriorities",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # aws_iam_policy.external_secrets_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "external_secrets_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Policy for External Secrets to access SSM Parameter Store and Secrets Manager"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "kkamji_external_secrets_policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ssm:GetParameters",
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "ssm:DescribeParameters",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:ssm:ap-northeast-2:376129852049:parameter/*"
                      [32m+[0m[0m Sid      = "SSMParameterStoreAccess"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "secretsmanager:ListSecretVersionIds",
                          [32m+[0m[0m "secretsmanager:GetSecretValue",
                          [32m+[0m[0m "secretsmanager:GetResourcePolicy",
                          [32m+[0m[0m "secretsmanager:DescribeSecret",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:secretsmanager:ap-northeast-2:376129852049:secret:*"
                      [32m+[0m[0m Sid      = "SecretsManagerReadAccess"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "secretsmanager:ListSecrets"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "SecretsManagerListAndPolicy"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # aws_iam_role.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "aws_load_balancer_controller" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:SourceArn" = "arn:aws:eks:ap-northeast-2:376129852049:podidentityassociation/kkamji-simple/*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "AllowEksAuthToAssumeRoleForPodIdentity"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "kkamji-aws-lbc-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.ebs_csi_driver[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ebs_csi_driver" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:SourceArn" = "arn:aws:eks:ap-northeast-2:376129852049:podidentityassociation/kkamji-simple/*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "AllowEksAuthToAssumeRoleForPodIdentity"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "kkamji-ebs-csi-driver-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "external_secrets" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:SourceArn" = "arn:aws:eks:ap-northeast-2:376129852049:podidentityassociation/kkamji-simple/*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "AllowEksAuthToAssumeRoleForPodIdentity"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "kkamji_external_secrets"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "aws_load_balancer_controller" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "kkamji-aws-lbc-role"
    }

[1m  # aws_iam_role_policy_attachment.ebs_csi_driver[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ebs_csi_driver" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      [32m+[0m[0m role       = "kkamji-ebs-csi-driver-role"
    }

[1m  # aws_iam_role_policy_attachment.external_secrets_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "external_secrets_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "kkamji_external_secrets"
    }

[1m  # aws_security_group_rule.eks_api_server_from_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "eks_api_server_from_vpc" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "10.0.0.0/16",
        ]
      [32m+[0m[0m description              = "Allow Kubernetes API server (443) from VPC CIDR"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # helm_release.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "aws_load_balancer_controller" {
      [32m+[0m[0m atomic                     = true
      [32m+[0m[0m chart                      = "aws-load-balancer-controller"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "aws-load-balancer-controller"
      [32m+[0m[0m namespace                  = "kube-system"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://aws.github.io/eks-charts"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m set                        = [
          [32m+[0m[0m {
              [32m+[0m[0m name  = "clusterName"
              [32m+[0m[0m value = "kkamji-simple"
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m name  = "serviceAccount.create"
              [32m+[0m[0m value = "false"
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m name  = "serviceAccount.name"
              [32m+[0m[0m value = "aws-load-balancer-controller"
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m set_wo                     = (write-only attribute)
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 600
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "1.13.0"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # helm_release.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "external_secrets" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "external-secrets"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "external-secrets"
      [32m+[0m[0m namespace                  = "external-secrets"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://charts.external-secrets.io"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m set                        = [
          [32m+[0m[0m {
              [32m+[0m[0m name  = "serviceAccount.create"
              [32m+[0m[0m value = "false"
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m name  = "serviceAccount.name"
              [32m+[0m[0m value = "external-secrets"
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m set_wo                     = (write-only attribute)
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "0.14.3"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # kubernetes_namespace.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_namespace" "external_secrets" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m wait_for_default_service_account = false

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "external-secrets"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # kubernetes_service_account.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_service_account" "aws_load_balancer_controller" {
      [32m+[0m[0m automount_service_account_token = true
      [32m+[0m[0m default_secret_name             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "aws-load-balancer-controller"
          [32m+[0m[0m namespace        = "kube-system"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # kubernetes_service_account.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_service_account" "external_secrets" {
      [32m+[0m[0m automount_service_account_token = true
      [32m+[0m[0m default_secret_name             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "external-secrets"
          [32m+[0m[0m namespace        = "external-secrets"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # kubernetes_storage_class_v1.gp3[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_storage_class_v1" "gp3" {
      [32m+[0m[0m allow_volume_expansion = true
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m mount_options          = [
          [32m+[0m[0m "discard",
        ]
      [32m+[0m[0m parameters             = {
          [32m+[0m[0m "encrypted" = "true"
          [32m+[0m[0m "fsType"    = "ext4"
          [32m+[0m[0m "type"      = "gp3"
        }
      [32m+[0m[0m reclaim_policy         = "Delete"
      [32m+[0m[0m storage_provisioner    = "ebs.csi.aws.com"
      [32m+[0m[0m volume_binding_mode    = "WaitForFirstConsumer"

      [32m+[0m[0m metadata {
          [32m+[0m[0m annotations      = {
              [32m+[0m[0m "storageclass.kubernetes.io/is-default-class" = "true"
            }
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "gp3"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # module.eks.data.aws_eks_addon_version.this["aws-ebs-csi-driver"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "aws-ebs-csi-driver"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.33"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["coredns"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "coredns"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.33"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["eks-pod-identity-agent"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "eks-pod-identity-agent"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.33"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["kube-proxy"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "kube-proxy"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.33"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["metrics-server"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "metrics-server"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.33"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["snapshot-controller"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "snapshot-controller"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.33"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["vpc-cni"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "vpc-cni"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.33"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/kkamji-simple/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m region            = "ap-northeast-2"
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name" = "/aws/eks/kkamji-simple/cluster"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "/aws/eks/kkamji-simple/cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.eks.aws_eks_access_entry.this["cluster_creator"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = (known after apply)
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::376129852049:user/KKamJi2024"
      [32m+[0m[0m region            = "ap-northeast-2"
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_policy_association.this["cluster_creator_admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = (known after apply)
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::376129852049:user/KKamJi2024"
      [32m+[0m[0m region        = "ap-northeast-2"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_access_policy_association.this["cluster_creator_cluster_admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = (known after apply)
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::376129852049:user/KKamJi2024"
      [32m+[0m[0m region        = "ap-northeast-2"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_addon.before_compute["eks-pod-identity-agent"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "before_compute" {
      [32m+[0m[0m addon_name                  = "eks-pod-identity-agent"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m region                      = "ap-northeast-2"
      [32m+[0m[0m resolve_conflicts_on_create = "NONE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.before_compute["vpc-cni"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "before_compute" {
      [32m+[0m[0m addon_name                  = "vpc-cni"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = jsonencode(
            {
              [32m+[0m[0m env = {
                  [32m+[0m[0m ENABLE_PREFIX_DELEGATION = "true"
                }
            }
        )
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m region                      = "ap-northeast-2"
      [32m+[0m[0m resolve_conflicts_on_create = "NONE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["aws-ebs-csi-driver"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "aws-ebs-csi-driver"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m region                      = "ap-northeast-2"
      [32m+[0m[0m resolve_conflicts_on_create = "NONE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m pod_identity_association {
          [32m+[0m[0m role_arn        = (known after apply)
          [32m+[0m[0m service_account = "ebs-csi-controller-sa"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["coredns"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "coredns"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m region                      = "ap-northeast-2"
      [32m+[0m[0m resolve_conflicts_on_create = "NONE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["kube-proxy"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "kube-proxy"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m region                      = "ap-northeast-2"
      [32m+[0m[0m resolve_conflicts_on_create = "NONE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["metrics-server"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "metrics-server"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m region                      = "ap-northeast-2"
      [32m+[0m[0m resolve_conflicts_on_create = "NONE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["snapshot-controller"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "snapshot-controller"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m region                      = "ap-northeast-2"
      [32m+[0m[0m resolve_conflicts_on_create = "NONE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = false
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m deletion_protection           = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "kkamji-simple"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m region                        = "ap-northeast-2"
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "ManagedBy"             = "terraform"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                       = "1.33"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m compute_config {
          [32m+[0m[0m enabled = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)

          [32m+[0m[0m elastic_load_balancing {
              [32m+[0m[0m enabled = false
            }
        }

      [32m+[0m[0m storage_config {
          [32m+[0m[0m block_storage {
              [32m+[0m[0m enabled = false
            }
        }

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-08b1a2e427e38255d",
              [32m+[0m[0m "subnet-0d0b57461e7c34ad9",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Name" = "kkamji-simple-eks-irsa"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "kkamji-simple-eks-irsa"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "kkamji-simple-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:TagSession",
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "kkamji-simple-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "kkamji-simple-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m region                 = "ap-northeast-2"
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "kkamji-simple-cluster"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "kkamji-simple-cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id                 = "vpc-06531225369d17ce4"
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "kkamji-simple-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m region                 = "ap-northeast-2"
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                = "kkamji-simple-node"
          [32m+[0m[0m "kubernetes.io/cluster/kkamji-simple" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                         = "dev"
          [32m+[0m[0m "ManagedBy"                           = "terraform"
          [32m+[0m[0m "Name"                                = "kkamji-simple-node"
          [32m+[0m[0m "Terraform"                           = "true"
          [32m+[0m[0m "kubernetes.io/cluster/kkamji-simple" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-06531225369d17ce4"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["metrics_server_10251"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Allow metrics-server on TCP 10251 from cluster"
      [32m+[0m[0m from_port                = 10251
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m region                   = "ap-northeast-2"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10251
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "certificate_authority_data" = (known after apply)
          [32m+[0m[0m "endpoint"                   = (known after apply)
          [32m+[0m[0m "kubernetes_version"         = "1.33"
          [32m+[0m[0m "name"                       = (known after apply)
          [32m+[0m[0m "service_cidr"               = (known after apply)
        }
    }

[1m  # module.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2023_ARM_64_STANDARD"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = (known after apply)
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t4g.small",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "node.kubernetes.io/app" = "operation"
        }
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "operation-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m region                 = "ap-northeast-2"
      [32m+[0m[0m release_version        = "1.33.4-20250915"
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-08b1a2e427e38255d",
          [32m+[0m[0m "subnet-0d0b57461e7c34ad9",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "operation"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "operation"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m version                = "1.33"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 2
        }

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 50
        }
    }

[1m  # module.eks.module.eks_managed_node_group["operation"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "operation-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["operation"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for operation EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key_name               = "kkamji_key_2024"
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "operation-"
      [32m+[0m[0m region                 = "ap-northeast-2"
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m user_data              = "Q29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSJNSU1FQk9VTkRBUlkiCk1JTUUtVmVyc2lvbjogMS4wDQoNCi0tTUlNRUJPVU5EQVJZDQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL25vZGUuZWtzLmF3cw0KTWltZS1WZXJzaW9uOiAxLjANCg0KYXBpVmVyc2lvbjogbm9kZS5la3MuYXdzL3YxYWxwaGExCmtpbmQ6IE5vZGVDb25maWcKc3BlYzoKICBrdWJlbGV0OgogICAgY29uZmlnOgogICAgICBtYXhQb2RzOiAxMTAKDQotLU1JTUVCT1VOREFSWS0tDQo="
      [32m+[0m[0m vpc_security_group_ids = (known after apply)
        [90m# (1 unchanged attribute hidden)[0m[0m

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = "disabled"
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = "disabled"
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name" = "operation"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name" = "operation"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name" = "operation"
            }
        }
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::376129852049:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::376129852049:user/KKamJi2024",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/kkamji-simple"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m region         = "ap-northeast-2"
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "kkamji-simple cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m region                             = "ap-northeast-2"
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "ManagedBy"             = "terraform"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["application"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["operation"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 59 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cluster_endpoint                  = (known after apply)
  [32m+[0m[0m cluster_name                      = "kkamji-simple"
  [32m+[0m[0m cluster_primary_security_group_id = (known after apply)
  [32m+[0m[0m cluster_service_cidr              = (known after apply)
  [32m+[0m[0m cluster_version                   = "1.33"
  [32m+[0m[0m node_security_group_arn           = (known after apply)
  [32m+[0m[0m node_security_group_id            = (known after apply)
[0m[1maws_iam_policy.aws_load_balancer_controller: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.this[0]: Creating...[0m[0m
[0m[1maws_iam_policy.external_secrets_policy: Creating...[0m[0m
[0m[1maws_iam_role.aws_load_balancer_controller: Creating...[0m[0m
[0m[1mmodule.eks.aws_cloudwatch_log_group.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creating...[0m[0m
[0m[1maws_iam_role.ebs_csi_driver: Creating...[0m[0m
[0m[1maws_iam_role.external_secrets: Creating...[0m[0m
[0m[1mmodule.eks.aws_cloudwatch_log_group.this[0]: Creation complete after 1s [id=/aws/eks/kkamji-simple/cluster][0m
[0m[1maws_iam_policy.external_secrets_policy: Creation complete after 2s [id=arn:aws:iam::376129852049:policy/kkamji_external_secrets_policy][0m
[0m[1maws_iam_policy.aws_load_balancer_controller: Creation complete after 2s [id=arn:aws:iam::376129852049:policy/kkamji-aws-lbc-policy][0m
[0m[1mmodule.eks.aws_iam_role.this[0]: Creation complete after 2s [id=kkamji-simple-cluster-20250921085437412400000002][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creating...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_iam_policy_document.this[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_iam_policy_document.this[0]: Read complete after 0s [id=1734011941][0m
[0m[1mmodule.eks.module.kms.aws_kms_key.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role.this[0]: Creation complete after 2s [id=operation-eks-node-group-20250921085437411900000001][0m
[0m[1maws_iam_role.aws_load_balancer_controller: Creation complete after 2s [id=kkamji-aws-lbc-role][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.aws_load_balancer_controller: Creating...[0m[0m
[0m[1maws_iam_role.ebs_csi_driver: Creation complete after 2s [id=kkamji-ebs-csi-driver-role][0m
[0m[1maws_iam_role_policy_attachment.ebs_csi_driver: Creating...[0m[0m
[0m[1maws_iam_role.external_secrets: Creation complete after 2s [id=kkamji_external_secrets][0m
[0m[1maws_iam_role_policy_attachment.external_secrets_policy_attachment: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creation complete after 2s [id=sg-0bf0ba83beeb51ab5][0m
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creation complete after 2s [id=sg-01034fecf11ee9065][0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creation complete after 0s [id=kkamji-simple-cluster-20250921085437412400000002/arn:aws:iam::aws:policy/AmazonEKSClusterPolicy][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]: Creation complete after 0s [id=operation-eks-node-group-20250921085437411900000001/arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]: Creation complete after 0s [id=operation-eks-node-group-20250921085437411900000001/arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.aws_load_balancer_controller: Creation complete after 0s [id=kkamji-aws-lbc-role/arn:aws:iam::376129852049:policy/kkamji-aws-lbc-policy][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.ebs_csi_driver: Creation complete after 0s [id=kkamji-ebs-csi-driver-role/arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]: Creation complete after 0s [id=operation-eks-node-group-20250921085437411900000001/arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["metrics_server_10251"]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.external_secrets_policy_attachment: Creation complete after 0s [id=kkamji_external_secrets/arn:aws:iam::376129852049:policy/kkamji_external_secrets_policy][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creation complete after 1s [id=sgrule-712083736][0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creation complete after 1s [id=sgrule-2014621432][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creation complete after 1s [id=sgrule-3343137384][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creation complete after 2s [id=sgrule-3011541704][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creation complete after 2s [id=sgrule-990712370][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creation complete after 3s [id=sgrule-400546087][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creation complete after 3s [id=sgrule-266969362][0m
[0m[1mmodule.eks.aws_security_group_rule.node["metrics_server_10251"]: Creation complete after 4s [id=sgrule-256131657][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creation complete after 4s [id=sgrule-3888700705][0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creation complete after 4s [id=sgrule-1041994678][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creation complete after 5s [id=sgrule-3333146244][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creation complete after 6s [id=sgrule-481664307][0m
[0m[1mmodule.eks.module.kms.aws_kms_key.this[0]: Still creating... [00m11s elapsed][0m[0m
[0m[1mmodule.eks.module.kms.aws_kms_key.this[0]: Creation complete after 21s [id=6dc601f2-18fa-4067-9bda-0109f865d81b][0m
[0m[1mmodule.eks.module.kms.aws_kms_alias.this["cluster"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_policy.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.kms.aws_kms_alias.this["cluster"]: Creation complete after 0s [id=alias/eks/kkamji-simple][0m
[0m[1mmodule.eks.aws_iam_policy.cluster_encryption[0]: Creation complete after 1s [id=arn:aws:iam::376129852049:policy/kkamji-simple-cluster-ClusterEncryption20250921085459872000000005][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creation complete after 0s [id=kkamji-simple-cluster-20250921085437412400000002/arn:aws:iam::376129852049:policy/kkamji-simple-cluster-ClusterEncryption20250921085459872000000005][0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [00m42s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [00m54s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [01m04s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [01m14s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [01m26s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [01m36s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [01m46s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [01m58s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [02m08s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [02m18s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [02m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [02m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [02m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [03m02s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [03m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [03m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [03m34s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [03m44s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [03m54s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [04m06s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [04m16s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [04m26s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [04m38s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [04m48s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [04m58s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [05m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [05m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [05m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [05m42s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [05m52s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [06m02s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [06m14s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [06m24s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [06m34s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [06m46s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [06m56s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [07m06s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [07m17s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [07m27s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [07m37s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [07m49s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [07m59s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [08m09s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [08m21s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [08m31s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [08m41s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Creation complete after 8m44s [id=kkamji-simple][0m
[0m[1mmodule.eks.data.tls_certificate.this[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["metrics-server"]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["eks-pod-identity-agent"]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["coredns"]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["vpc-cni"]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["snapshot-controller"]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["kube-proxy"]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["aws-ebs-csi-driver"]: Reading...[0m[0m
[0m[1mmodule.eks.aws_eks_access_entry.this["cluster_creator"]: Creating...[0m[0m
[0m[1mmodule.eks.time_sleep.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.data.tls_certificate.this[0]: Read complete after 0s [id=2f4c12273dfce0668da79492f884c5b681951fb9][0m
[0m[1mmodule.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creating...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["snapshot-controller"]: Read complete after 0s [id=snapshot-controller][0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["aws-ebs-csi-driver"]: Read complete after 0s [id=aws-ebs-csi-driver][0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["coredns"]: Read complete after 0s [id=coredns][0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["vpc-cni"]: Read complete after 0s [id=vpc-cni][0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["metrics-server"]: Read complete after 0s [id=metrics-server][0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["eks-pod-identity-agent"]: Read complete after 0s [id=eks-pod-identity-agent][0m
[0m[1mmodule.eks.aws_eks_access_entry.this["cluster_creator"]: Creation complete after 0s [id=kkamji-simple:arn:aws:iam::376129852049:user/KKamJi2024][0m
[0m[1mmodule.eks.aws_eks_access_policy_association.this["cluster_creator_admin"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_access_policy_association.this["cluster_creator_cluster_admin"]: Creating...[0m[0m
[0m[1mmodule.eks.data.aws_eks_addon_version.this["kube-proxy"]: Read complete after 0s [id=kube-proxy][0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["vpc-cni"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["eks-pod-identity-agent"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_access_policy_association.this["cluster_creator_cluster_admin"]: Creation complete after 1s [id=kkamji-simple#arn:aws:iam::376129852049:user/KKamJi2024#arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy][0m
[0m[1mmodule.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creation complete after 1s [id=arn:aws:iam::376129852049:oidc-provider/oidc.eks.ap-northeast-2.amazonaws.com/id/02B8C6EB20D624A7A4D7027F5A0EC7A9][0m
[0m[1mmodule.eks.aws_eks_access_policy_association.this["cluster_creator_admin"]: Creation complete after 1s [id=kkamji-simple#arn:aws:iam::376129852049:user/KKamJi2024#arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy][0m
[0m[1mmodule.eks.time_sleep.this[0]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["eks-pod-identity-agent"]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["vpc-cni"]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.time_sleep.this[0]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["vpc-cni"]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["eks-pod-identity-agent"]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["vpc-cni"]: Creation complete after 26s [id=kkamji-simple:vpc-cni][0m
[0m[1mmodule.eks.time_sleep.this[0]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.time_sleep.this[0]: Creation complete after 32s [id=2025-09-21T09:04:15Z][0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].module.user_data.null_resource.validate_cluster_service_cidr: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].module.user_data.null_resource.validate_cluster_service_cidr: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].module.user_data.null_resource.validate_cluster_service_cidr: Creation complete after 0s [id=4196768093257977462][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].module.user_data.null_resource.validate_cluster_service_cidr: Creation complete after 0s [id=2271764471057209785][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_launch_template.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["eks-pod-identity-agent"]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.before_compute["eks-pod-identity-agent"]: Creation complete after 38s [id=kkamji-simple:eks-pod-identity-agent][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_launch_template.this[0]: Creation complete after 7s [id=lt-0ae4e9e75902b527c][0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Still creating... [00m42s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Still creating... [00m52s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Still creating... [01m04s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Still creating... [01m14s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["operation"].aws_eks_node_group.this[0]: Creation complete after 1m22s [id=kkamji-simple:operation-2025092109042326540000000a][0m
[0m[1mmodule.eks.aws_eks_addon.this["snapshot-controller"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["aws-ebs-csi-driver"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["kube-proxy"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["coredns"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["metrics-server"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["coredns"]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["aws-ebs-csi-driver"]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["snapshot-controller"]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["kube-proxy"]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["metrics-server"]: Still creating... [00m12s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["kube-proxy"]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["snapshot-controller"]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["aws-ebs-csi-driver"]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["coredns"]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["metrics-server"]: Still creating... [00m22s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["kube-proxy"]: Creation complete after 26s [id=kkamji-simple:kube-proxy][0m
[0m[1mmodule.eks.aws_eks_addon.this["coredns"]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["aws-ebs-csi-driver"]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["snapshot-controller"]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["metrics-server"]: Still creating... [00m32s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["metrics-server"]: Creation complete after 36s [id=kkamji-simple:metrics-server][0m
[0m[1mmodule.eks.aws_eks_addon.this["snapshot-controller"]: Creation complete after 36s [id=kkamji-simple:snapshot-controller][0m
[0m[1mmodule.eks.aws_eks_addon.this["aws-ebs-csi-driver"]: Still creating... [00m43s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["coredns"]: Still creating... [00m43s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["aws-ebs-csi-driver"]: Creation complete after 49s [id=kkamji-simple:aws-ebs-csi-driver][0m
[0m[1mmodule.eks.aws_eks_addon.this["coredns"]: Still creating... [00m53s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_addon.this["coredns"]: Creation complete after 58s [id=kkamji-simple:coredns][0m
[0m[1mkubernetes_namespace.external_secrets: Creating...[0m[0m
[0m[1maws_security_group_rule.eks_api_server_from_vpc: Creating...[0m[0m
[0m[1mkubernetes_storage_class_v1.gp3: Creating...[0m[0m
[0m[1mkubernetes_service_account.aws_load_balancer_controller: Creating...[0m[0m
[0m[1maws_security_group_rule.eks_api_server_from_vpc: Creation complete after 1s [id=sgrule-1958056528][0m
[0m[1mkubernetes_storage_class_v1.gp3: Creation complete after 1s [id=gp3][0m
[0m[1mkubernetes_namespace.external_secrets: Creation complete after 1s [id=external-secrets][0m
[0m[1mkubernetes_service_account.external_secrets: Creating...[0m[0m
[0m[1mkubernetes_service_account.aws_load_balancer_controller: Creation complete after 1s [id=kube-system/aws-load-balancer-controller][0m
[0m[1maws_eks_pod_identity_association.aws_load_balancer_controller: Creating...[0m[0m
[0m[1mkubernetes_service_account.external_secrets: Creation complete after 0s [id=external-secrets/external-secrets][0m
[0m[1maws_eks_pod_identity_association.external_secrets: Creating...[0m[0m
[0m[1maws_eks_pod_identity_association.aws_load_balancer_controller: Creation complete after 1s [id=a-298ao1z2q639rcpnd][0m
[0m[1maws_eks_pod_identity_association.external_secrets: Creation complete after 1s [id=a-guuiehaprdpcmbuhx][0m
[0m[1mhelm_release.aws_load_balancer_controller: Creating...[0m[0m
[0m[1mhelm_release.aws_load_balancer_controller: Still creating... [00m12s elapsed][0m[0m
[0m[1mhelm_release.aws_load_balancer_controller: Still creating... [00m22s elapsed][0m[0m
[0m[1mhelm_release.aws_load_balancer_controller: Creation complete after 24s [id=aws-load-balancer-controller][0m
[0m[1mhelm_release.external_secrets: Creating...[0m[0m
[0m[1mhelm_release.external_secrets: Still creating... [00m10s elapsed][0m[0m
[0m[1mhelm_release.external_secrets: Still creating... [00m22s elapsed][0m[0m
[0m[1mhelm_release.external_secrets: Still creating... [00m32s elapsed][0m[0m
[0m[1mhelm_release.external_secrets: Creation complete after 42s [id=external-secrets][0m
[0m[1m[32m
Apply complete! Resources: 59 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mcluster_endpoint = "https://02B8C6EB20D624A7A4D7027F5A0EC7A9.sk1.ap-northeast-2.eks.amazonaws.com"
cluster_name = "kkamji-simple"
cluster_primary_security_group_id = "sg-0d52e1096b4076b84"
cluster_service_cidr = "172.20.0.0/16"
cluster_version = "1.33"
node_security_group_arn = "arn:aws:ec2:ap-northeast-2:376129852049:security-group/sg-0bf0ba83beeb51ab5"
node_security_group_id = "sg-0bf0ba83beeb51ab5"
